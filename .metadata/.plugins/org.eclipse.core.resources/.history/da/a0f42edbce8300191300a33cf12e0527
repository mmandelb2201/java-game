package game;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JComponent;

public class drawingComponent extends JComponent{
	private character[][] grid;
	private int max;
	private int size;
	private int gridPixleSize;
	player play;
	public boolean isPaused = false;
	public ArrayList<character> renderList;
	public Font f;
	int score;
	int health;
	final long currentTime = System.currentTimeMillis();
	public BufferedImage buffImg;
	public File danny = new File("C:\\Users\\mchor\\Desktop\\game csa\\game\\src\\game\\dan.png");
	public File swedishFlag = new File("C:\\Users\\mchor\\Desktop\\game csa\\game\\src\\game\\swedish_flag.png");
	
	public drawingComponent(player one, int maxt, int gridSize, int scored, int currentHealth){
		grid = new character[maxt][maxt];
		max = maxt;
		health = currentHealth;
		size = maxt;
		gridPixleSize = gridSize;
		play = one;
		score = scored;
		buffImg = new BufferedImage(runner.size, runner.size, BufferedImage.TYPE_INT_ARGB);
		renderList = new ArrayList<character>();
		f = new Font("Veranda", Font.BOLD, 25);
	}
	public void add(character temp) {
		renderList.add(temp);
	}
	public void paintComponent(Graphics g){
		BufferedImageOp bio;
		Graphics2D g2 = (Graphics2D) g;
		int constant = gridPixleSize/max;
		try {
			BufferedImage in = ImageIO.read(swedishFlag);
			BufferedImage in2 = ImageIO.read(danny);
;			for(int i = 0;i<renderList.size();i++) {
				if(renderList.get(i).getId() == 2) {
					g2.setColor(Color.blue);
					g2.drawImage(in2, renderList.get(i).getX()*constant, renderList.get(i).getY()*constant, null);
					
				}
				if(renderList.get(i).getId() == 4) {
					g2.setColor(Color.red);
					g2.fillRect(renderList.get(i).getX()*constant, renderList.get(i).getY()*constant, constant, constant);
				}
				if(renderList.get(i).getId() == 3) {
					g2.setColor(Color.yellow);
					g2.fillRect(renderList.get(i).getX()*constant, renderList.get(i).getY()*constant, constant, constant);
				}
				if(renderList.get(i).getId() == 5) {
					g2.setColor(Color.green);
					g2.drawImage(in, renderList.get(i).getX()*constant, renderList.get(i).getY()*constant, null);
				}

			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		if(isPaused == true) {g2.setFont(f);
			g2.setColor(Color.red);
			g2.drawString("Paused", (int) (gridPixleSize/2.5), (int) (gridPixleSize/2));}
		g2.setColor(Color.BLACK);
		g2.setFont(f);
		g2.drawString("Health: "+health, (int)(gridPixleSize*.08),(int)(gridPixleSize*.95));
		g2.drawString("Score: "+score, (int)(gridPixleSize*.75), (int)(gridPixleSize*.10));
		g2.drawString("Time: "+currentTime, (int)(gridPixleSize*.8), (int)(gridPixleSize*.8));
	}
	public void togglePause() {
		if(isPaused == false) {
			isPaused = true;
		}
		else {isPaused = false;}
	}
	public void setScore(int z) {score = z;}
}
