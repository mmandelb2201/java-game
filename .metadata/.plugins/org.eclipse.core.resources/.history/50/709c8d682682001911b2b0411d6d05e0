package game;

import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class grid extends JPanel {
	static character[][] grid;
	static int itemSize;
	static int gridSized;
	static int gridPixleSize;
	static mapHolder maps;
	player one;
	food foodie;
	static drawingComponent DC;
	public grid(int size, int itemSizes, int gridSize, player play, mapHolder map){
		grid = new character[size][size];
		itemSize = itemSizes;
		gridPixleSize = gridSize;
		maps = map;
		gridSized = size;
		fill();
		one = play;
		add(one, one.getX(), one.getY());
		wall wll = new wall(3, 3);
		add(wll, wll.getX(), wll.getY());
		foodie = new food(8, 8);
		DC = new drawingComponent(one, itemSize, gridPixleSize, one.getScore());
		DC.add(one);
		DC.add(foodie);
		DC.add(wll);
		loadMap(0);
	}
	public static void loadMap(int difficulty) {
		map x = maps.getMap(0);
		wall[] current = x.getWalls();
		for(int i = 0;i<current.length;i++) {
			System.out.print("current[i].getX(): "+current[i].getX());
			add(current[i], current[i].getX(), current[i].getY());
			DC.add(current[i]);
		}
	}
	public static void fill(){
		for(int i = 0;i<grid.length;i++){
			for(int q =0;q<grid[i].length;q++){
				grid[i][q] = new emptySpace(i, q);
			}
		}
	}
	public static void giveRandomPosition(character that) {
		int x;
		int y;
		x = (int) (Math.random()*itemSize);
		y = (int) (Math.random()*itemSize);
		boolean foundGoodLoc = false;
		while(foundGoodLoc == false) {
			if(isValid(x, y) == true && isOccupied(x, y) == false) {
				foundGoodLoc = true;
			}else {
				x = (int) (Math.random()*itemSize);
				y = (int) (Math.random()*itemSize);
			}
		} 
		that.setX(x);
		that.setY(y);
	}
	public drawingComponent update(){
		DC.setScore(one.getScore());
		if(sameSpot(one, foodie) == true) {
			one.addOne();
			giveRandomPosition(foodie);
		}
		return DC;
	}
	public static boolean isValid(int x, int y){
		if(x<gridSized && y<gridSized && x >= 0 && y >= 0){
			return true;
		}return false;
	}
	public static boolean isOccupied(int x, int y){
		if(grid[x][y].getId() == 0){return false;}
		if(grid[x][y].getId() == 3) {return true;}
		return true;
	}
	public void moveLeft(character self, int x, int y){
		if(isValid(x-1, y) == true && isOccupied(x-1, y) == false){
			grid[x][y] = new emptySpace(x, y);
			grid[x-1][y] = self;
			self.setX(x-1);}
	}
	public void moveRight(character self, int x, int y){
		if(isValid(x+1, y) == true && isOccupied(x+1, y) == false){
			grid[x][y] = new emptySpace(x, y);
			grid[x+1][y] = self;
			self.setX(x+1);}
		}

	public static void add(character self, int x, int y){
		if(isValid(x, y) == true){
			grid[x][y] = self;}
	}
	public boolean sameSpot(character first, character second) {
		if(first.getX() == second.getX() && first.getY() == second.getY()){
			return true;
		}
		return false;
	}
	public static void remove(int x, int y) {grid[x][y] = new emptySpace(x, y);}
	public void moveUp(character self, int x, int y){
		if(isValid(x, y-1) == true && isOccupied(x, y-1) == false){
			grid[x][y] = new emptySpace(x, y);
			grid[x][y-1] = self;
			self.setY(y-1);
		}
	}
	public void moveDown(character self, int x, int y){
		if(isValid(x, y+1) == true && isOccupied(x, y+1) == false){
			grid[x][y] = new emptySpace(x, y);
			grid[x][y+1] = self;
			self.setY(y+1);}
		}
	}

