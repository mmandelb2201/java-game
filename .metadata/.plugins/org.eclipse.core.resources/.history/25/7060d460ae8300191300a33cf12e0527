package game;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class runner extends JPanel{
	static MyKeyListener list;
	static player play;
	static grid gameGrid;
	public static int size = 600;
	static int gridSize = 10;
	static enemy[] enemies;
	static boolean isRunning = true;
	static boolean isPaused = false;
	static drawingComponent DC;
	static boolean firstTime;
	public runner(){
		MyKeyListener listener = new MyKeyListener(this);
		player one = new player(1, 1);
		enemy[] y = new enemy[3];
		y[0] = new enemy(8, 2);
		y[1] = new enemy(6, 7);
		y[2] = new enemy(2, 8);
		enemies = new enemy[y.length];
		enemies = y;
		grid Grid = new grid(gridSize, gridSize, size, one, enemies);
		play = one;
		gameGrid = Grid;
		list = listener;
		firstTime = true;
		this.addKeyListener(listener);
		setFocusable(true);
	}
	public static void main(String[] args){	
	runner runn = new runner();
	JFrame frame = new JFrame("game");
	int frameSized = (int) (size*1.1);
	frame.setSize(frameSized, frameSized);
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.setVisible(true);
	frame.add(runn);
	frame.addKeyListener(list);
	frame.setBackground(Color.gray);
	while(isRunning){
		if(isPaused == false) {
	if(list.getDir() == 1) {
	gameGrid.moveUp(play, play.getX(), play.getY());
	list.setDir(0);
	}
	else if(list.getDir() == 2) {
	gameGrid.moveDown(play, play.getX(), play.getY());
	list.setDir(0);
	}
	else if(list.getDir() == 3) {
	gameGrid.moveLeft(play, play.getX(), play.getY());
	list.setDir(0);
	}
	else if(list.getDir() == 4) {
	gameGrid.moveRight(play, play.getX(), play.getY());
	list.setDir(0);
	}
	else {doNothing();}
	}
	for(int i = 0;i<enemies.length;i++) {
		boolean moved = false;
		while(moved == false) {
			int r = (int) (Math.random()*4);
			if(r == 0) {
				if(gameGrid.moveUp(enemies[i], enemies[i].getX(), enemies[i].getY()) == 0) {
					gameGrid.moveUp(enemies[i], enemies[i].getX(), enemies[i].getY());
					moved = true;
				}
			}
			else if(r == 1) {
				if(gameGrid.moveDown(enemies[i], enemies[i].getX(), enemies[i].getY()) == 0) {
					gameGrid.moveDown(enemies[i], enemies[i].getX(), enemies[i].getY());
					moved = true;
				}
			}
		}
	}
	if(list.getDir() == 5) {
		togglePause();
		DC.togglePause();
		list.setDir(0);
	}
	
	DC = gameGrid.update();
	frame.add(DC);
	frame.repaint();
	}
	}
	
	public static void togglePause() {
		if(isPaused == false) {isPaused = true;}
		else {isPaused = false;}
	}
	public player getPlayer() {return play;}
	public static void doNothing() {return;}
	public void paintComponent(Graphics g){
	
	}
	
}

class MyKeyListener implements KeyListener {
	player play;
	runner runn;
	public int dir;
	public MyKeyListener(runner x){
		runn = x;
		dir = 0;
	}
	public void keyPressed(KeyEvent e){
		int key = e.getKeyCode();
		if(key == KeyEvent.VK_W){
			//System.out.println("W was pressed");
			dir = 1;
		}
		if(key == KeyEvent.VK_P) {
			dir = 5;
		}
		if(key == KeyEvent.VK_A) {
			//System.out.println("A was pressed");
			dir = 3;
		}
		if(key == KeyEvent.VK_S) {
			//System.out.println("S was pressed");
			dir = 2;
		}
		if(key == KeyEvent.VK_D) {
			//System.out.println("D was pressed");
			dir = 4;
		}
	}
@Override
	public void keyReleased(KeyEvent e) {
		//not going to be used
	}
@Override
	public void keyTyped(KeyEvent e) {
		//not going to be used
	}
	public int getDir() {return dir;}
	public void setDir(int x) {dir = x;}
}
